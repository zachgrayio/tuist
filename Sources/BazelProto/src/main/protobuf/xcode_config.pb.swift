// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/xcode_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Copyright 2020 The Bazel Authors. All rights reserved.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///    http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Information about a single Xcode version.
public struct XcodeConfig_XcodeVersionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The canonical version number for this Xcode.
  public var version: String = String()

  /// The aliases for this version, if present.
  public var aliases: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Information about the Xcode config, its dependencies and the selected Xcode.
public struct XcodeConfig_XcodeConfigRuleInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Xcode version selected from this configuration to be used in the build.
  public var selectedVersion: String = String()

  /// The availability of the selected Xcode version.
  public var selectedVersionAvailability: XcodeConfig_XcodeConfigRuleInfo.Availability = .unknown

  /// The explicitly listed (location-agnostic) Xcode versions in this
  /// config, if there are any. A config will have either explicit versions or
  /// both local and remote versions.
  public var explicitVersions: [XcodeConfig_XcodeVersionInfo] = []

  /// The remote Xcode versions in this config, if there are any.
  public var remoteVersions: [XcodeConfig_XcodeVersionInfo] = []

  /// The local Xcode versions in this config, if there are any.
  public var localVersions: [XcodeConfig_XcodeVersionInfo] = []

  /// The mutually available Xcode versions in this config, if there are any.
  public var mutualVersions: [XcodeConfig_XcodeVersionInfo] = []

  /// The default version of this Xcode config (explicit or local).
  public var defaultVersion: String = String()

  /// The value of the --xcode_version flag, if set.
  public var xcodeVersionFlag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Availability: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case local // = 1
    case remote // = 2
    case both // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .local
      case 2: self = .remote
      case 3: self = .both
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .local: return 1
      case .remote: return 2
      case .both: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension XcodeConfig_XcodeConfigRuleInfo.Availability: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [XcodeConfig_XcodeConfigRuleInfo.Availability] = [
    .unknown,
    .local,
    .remote,
    .both,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension XcodeConfig_XcodeVersionInfo: @unchecked Sendable {}
extension XcodeConfig_XcodeConfigRuleInfo: @unchecked Sendable {}
extension XcodeConfig_XcodeConfigRuleInfo.Availability: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xcode_config"

extension XcodeConfig_XcodeVersionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XcodeVersionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "aliases"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.aliases) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    if !self.aliases.isEmpty {
      try visitor.visitRepeatedStringField(value: self.aliases, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: XcodeConfig_XcodeVersionInfo, rhs: XcodeConfig_XcodeVersionInfo) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.aliases != rhs.aliases {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension XcodeConfig_XcodeConfigRuleInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XcodeConfigRuleInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "selected_version"),
    2: .standard(proto: "selected_version_availability"),
    3: .standard(proto: "explicit_versions"),
    4: .standard(proto: "remote_versions"),
    5: .standard(proto: "local_versions"),
    6: .standard(proto: "mutual_versions"),
    7: .standard(proto: "default_version"),
    8: .standard(proto: "xcode_version_flag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.selectedVersion) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.selectedVersionAvailability) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.explicitVersions) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.remoteVersions) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.localVersions) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.mutualVersions) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.defaultVersion) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.xcodeVersionFlag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.selectedVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.selectedVersion, fieldNumber: 1)
    }
    if self.selectedVersionAvailability != .unknown {
      try visitor.visitSingularEnumField(value: self.selectedVersionAvailability, fieldNumber: 2)
    }
    if !self.explicitVersions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.explicitVersions, fieldNumber: 3)
    }
    if !self.remoteVersions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.remoteVersions, fieldNumber: 4)
    }
    if !self.localVersions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.localVersions, fieldNumber: 5)
    }
    if !self.mutualVersions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mutualVersions, fieldNumber: 6)
    }
    if !self.defaultVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultVersion, fieldNumber: 7)
    }
    if !self.xcodeVersionFlag.isEmpty {
      try visitor.visitSingularStringField(value: self.xcodeVersionFlag, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: XcodeConfig_XcodeConfigRuleInfo, rhs: XcodeConfig_XcodeConfigRuleInfo) -> Bool {
    if lhs.selectedVersion != rhs.selectedVersion {return false}
    if lhs.selectedVersionAvailability != rhs.selectedVersionAvailability {return false}
    if lhs.explicitVersions != rhs.explicitVersions {return false}
    if lhs.remoteVersions != rhs.remoteVersions {return false}
    if lhs.localVersions != rhs.localVersions {return false}
    if lhs.mutualVersions != rhs.mutualVersions {return false}
    if lhs.defaultVersion != rhs.defaultVersion {return false}
    if lhs.xcodeVersionFlag != rhs.xcodeVersionFlag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension XcodeConfig_XcodeConfigRuleInfo.Availability: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "LOCAL"),
    2: .same(proto: "REMOTE"),
    3: .same(proto: "BOTH"),
  ]
}
