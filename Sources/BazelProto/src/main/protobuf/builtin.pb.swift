// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/builtin.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Proto that exposes all BUILD and Starlark builtin symbols.
//
// The API exporter is used for code completion in Cider.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ApiContext specifies the context(s) in which a symbol is available. For
/// example, a symbol may be available as a builtin only in .bzl files, but
/// not in BUILD files.
public enum Builtin_ApiContext: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case all // = 0
  case bzl // = 1
  case build // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .all
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .all
    case 1: self = .bzl
    case 2: self = .build
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .all: return 0
    case .bzl: return 1
    case .build: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Builtin_ApiContext: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Builtin_ApiContext] = [
    .all,
    .bzl,
    .build,
  ]
}

#endif  // swift(>=4.2)

/// Top-level object for all BUILD and Starlark builtin modules.
/// Globals contains a list of all builtin variables, functions and packages
/// (e.g. "java_common" and "native" will be included, same as "None" and
/// "dict").
/// Types contains a list of all builtin packages (e.g. "java_common"
/// and "native"). All types should be uniquely named.
public struct Builtin_Builtins {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: [Builtin_Type] = []

  public var global: [Builtin_Value] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Representation for Starlark builtin packages. It contains all the symbols
/// (variables and functions) exposed by the package.
/// E.g. "list" is a Type that exposes a list of fields containing: "insert",
/// "index", "remove" etc.
public struct Builtin_Type {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  /// List of fields and methods of this type. All such entities are listed as
  /// fields, and methods are fields which are callable.
  public var field: [Builtin_Value] = []

  /// Module documentation.
  public var doc: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Generic representation for a Starlark object. If the object is callable
/// (can act as a function), then callable will be set.
public struct Builtin_Value {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  /// Name of the type.
  public var type: String = String()

  /// Set when the object is a function.
  public var callable: Builtin_Callable {
    get {return _callable ?? Builtin_Callable()}
    set {_callable = newValue}
  }
  /// Returns true if `callable` has been explicitly set.
  public var hasCallable: Bool {return self._callable != nil}
  /// Clears the value of `callable`. Subsequent reads from it will return its default value.
  public mutating func clearCallable() {self._callable = nil}

  /// Value documentation.
  public var doc: String = String()

  /// The context(s) in which the symbol is recognized.
  public var apiContext: Builtin_ApiContext = .all

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _callable: Builtin_Callable? = nil
}

public struct Builtin_Callable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var param: [Builtin_Param] = []

  /// Name of the return type.
  public var returnType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Builtin_Param {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  /// Parameter type represented as a name.
  public var type: String = String()

  /// Parameter documentation.
  public var doc: String = String()

  /// Default value for the parameter, written as Starlark expression (e.g.
  /// "False", "True", "[]", "None")
  public var defaultValue: String = String()

  /// Whether the param is mandatory or optional.
  public var isMandatory: Bool = false

  /// Whether the param is a star argument.
  public var isStarArg: Bool = false

  /// Whether the param is a star-star argument.
  public var isStarStarArg: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Builtin_ApiContext: @unchecked Sendable {}
extension Builtin_Builtins: @unchecked Sendable {}
extension Builtin_Type: @unchecked Sendable {}
extension Builtin_Value: @unchecked Sendable {}
extension Builtin_Callable: @unchecked Sendable {}
extension Builtin_Param: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "builtin"

extension Builtin_ApiContext: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALL"),
    1: .same(proto: "BZL"),
    2: .same(proto: "BUILD"),
  ]
}

extension Builtin_Builtins: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Builtins"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "global"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.type) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.global) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.type, fieldNumber: 1)
    }
    if !self.global.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.global, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Builtin_Builtins, rhs: Builtin_Builtins) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.global != rhs.global {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Builtin_Type: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Type"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "field"),
    3: .same(proto: "doc"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.field) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.doc) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.field.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.field, fieldNumber: 2)
    }
    if !self.doc.isEmpty {
      try visitor.visitSingularStringField(value: self.doc, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Builtin_Type, rhs: Builtin_Type) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.field != rhs.field {return false}
    if lhs.doc != rhs.doc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Builtin_Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Value"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .same(proto: "callable"),
    4: .same(proto: "doc"),
    5: .standard(proto: "api_context"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._callable) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.doc) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.apiContext) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    try { if let v = self._callable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.doc.isEmpty {
      try visitor.visitSingularStringField(value: self.doc, fieldNumber: 4)
    }
    if self.apiContext != .all {
      try visitor.visitSingularEnumField(value: self.apiContext, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Builtin_Value, rhs: Builtin_Value) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs._callable != rhs._callable {return false}
    if lhs.doc != rhs.doc {return false}
    if lhs.apiContext != rhs.apiContext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Builtin_Callable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Callable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "param"),
    2: .standard(proto: "return_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.param) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.returnType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.param.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.param, fieldNumber: 1)
    }
    if !self.returnType.isEmpty {
      try visitor.visitSingularStringField(value: self.returnType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Builtin_Callable, rhs: Builtin_Callable) -> Bool {
    if lhs.param != rhs.param {return false}
    if lhs.returnType != rhs.returnType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Builtin_Param: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Param"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .same(proto: "doc"),
    4: .standard(proto: "default_value"),
    5: .standard(proto: "is_mandatory"),
    6: .standard(proto: "is_star_arg"),
    7: .standard(proto: "is_star_star_arg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.doc) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.defaultValue) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isMandatory) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isStarArg) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isStarStarArg) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.doc.isEmpty {
      try visitor.visitSingularStringField(value: self.doc, fieldNumber: 3)
    }
    if !self.defaultValue.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultValue, fieldNumber: 4)
    }
    if self.isMandatory != false {
      try visitor.visitSingularBoolField(value: self.isMandatory, fieldNumber: 5)
    }
    if self.isStarArg != false {
      try visitor.visitSingularBoolField(value: self.isStarArg, fieldNumber: 6)
    }
    if self.isStarStarArg != false {
      try visitor.visitSingularBoolField(value: self.isStarStarArg, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Builtin_Param, rhs: Builtin_Param) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.doc != rhs.doc {return false}
    if lhs.defaultValue != rhs.defaultValue {return false}
    if lhs.isMandatory != rhs.isMandatory {return false}
    if lhs.isStarArg != rhs.isStarArg {return false}
    if lhs.isStarStarArg != rhs.isStarStarArg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
