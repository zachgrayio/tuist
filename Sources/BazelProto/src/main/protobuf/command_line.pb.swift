// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/command_line.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Representation of a Bazel command line.
public struct CommandLine_CommandLine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A title for this command line value, to differentiate it from others.
  /// In particular, a single invocation may wish to report both the literal and
  /// canonical command lines, and this label would be used to differentiate
  /// between both versions. This is a string for flexibility.
  public var commandLineLabel: String = String()

  /// A Bazel command line is made of distinct parts. For example,
  ///    `bazel --nomaster_bazelrc test --nocache_test_results //foo:aTest`
  /// has the executable "bazel", a startup flag, a command "test", a command
  /// flag, and a test target. There could be many more flags and targets, or
  /// none (`bazel info` for example), but the basic structure is there. The
  /// command line should be broken down into these logical sections here.
  public var sections: [CommandLine_CommandLineSection] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A section of the Bazel command line.
public struct CommandLine_CommandLineSection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of this section, such as "startup_option" or "command".
  public var sectionLabel: String = String()

  public var sectionType: CommandLine_CommandLineSection.OneOf_SectionType? = nil

  /// Sections with non-options, such as the list of targets or the command,
  /// should use simple string chunks.
  public var chunkList: CommandLine_ChunkList {
    get {
      if case .chunkList(let v)? = sectionType {return v}
      return CommandLine_ChunkList()
    }
    set {sectionType = .chunkList(newValue)}
  }

  /// Startup and command options are lists of options and belong here.
  public var optionList: CommandLine_OptionList {
    get {
      if case .optionList(let v)? = sectionType {return v}
      return CommandLine_OptionList()
    }
    set {sectionType = .optionList(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_SectionType: Equatable {
    /// Sections with non-options, such as the list of targets or the command,
    /// should use simple string chunks.
    case chunkList(CommandLine_ChunkList)
    /// Startup and command options are lists of options and belong here.
    case optionList(CommandLine_OptionList)

  #if !swift(>=4.1)
    public static func ==(lhs: CommandLine_CommandLineSection.OneOf_SectionType, rhs: CommandLine_CommandLineSection.OneOf_SectionType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.chunkList, .chunkList): return {
        guard case .chunkList(let l) = lhs, case .chunkList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.optionList, .optionList): return {
        guard case .optionList(let l) = lhs, case .optionList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Wrapper to allow a list of strings in the "oneof" section_type.
public struct CommandLine_ChunkList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chunk: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Wrapper to allow a list of options in the "oneof" section_type.
public struct CommandLine_OptionList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var option: [CommandLine_Option] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A single command line option.
///
/// This represents the option itself, but does not take into account the type of
/// option or how the parser interpreted it. If this option is part of a command
/// line that represents the actual input that Bazel received, it would, for
/// example, include expansion flags as they are. However, if this option
/// represents the canonical form of the command line, with the values as Bazel
/// understands them, then the expansion flag, which has no value, would not
/// appear, and the flags it expands to would.
public struct CommandLine_Option {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// How the option looks with the option and its value combined. Depending on
  /// the purpose of this command line report, this could be the canonical
  /// form, or the way that the flag was set.
  ///
  /// Some examples: this might be `--foo=bar` form, or `--foo bar` with a space;
  /// for boolean flags, `--nobaz` is accepted on top of `--baz=false` and other
  /// negating values, or for a positive value, the unqualified `--baz` form
  /// is also accepted. This could also be a short `-b`, if the flag has an
  /// abbreviated form.
  public var combinedForm: String = String()

  /// The canonical name of the option, without the preceding dashes.
  public var optionName: String = String()

  /// The value of the flag, or unset for flags that do not take values.
  /// Especially for boolean flags, this should be in canonical form, the
  /// combined_form field above gives room for showing the flag as it was set
  /// if that is preferred.
  public var optionValue: String = String()

  /// This flag's tagged effects. See OptionEffectTag's java documentation for
  /// details.
  public var effectTags: [Options_OptionEffectTag] = []

  /// Metadata about the flag. See OptionMetadataTag's java documentation for
  /// details.
  public var metadataTags: [Options_OptionMetadataTag] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension CommandLine_CommandLine: @unchecked Sendable {}
extension CommandLine_CommandLineSection: @unchecked Sendable {}
extension CommandLine_CommandLineSection.OneOf_SectionType: @unchecked Sendable {}
extension CommandLine_ChunkList: @unchecked Sendable {}
extension CommandLine_OptionList: @unchecked Sendable {}
extension CommandLine_Option: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "command_line"

extension CommandLine_CommandLine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommandLine"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_line_label"),
    2: .same(proto: "sections"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.commandLineLabel) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.sections) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.commandLineLabel.isEmpty {
      try visitor.visitSingularStringField(value: self.commandLineLabel, fieldNumber: 1)
    }
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_CommandLine, rhs: CommandLine_CommandLine) -> Bool {
    if lhs.commandLineLabel != rhs.commandLineLabel {return false}
    if lhs.sections != rhs.sections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommandLine_CommandLineSection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommandLineSection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "section_label"),
    2: .standard(proto: "chunk_list"),
    3: .standard(proto: "option_list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sectionLabel) }()
      case 2: try {
        var v: CommandLine_ChunkList?
        var hadOneofValue = false
        if let current = self.sectionType {
          hadOneofValue = true
          if case .chunkList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.sectionType = .chunkList(v)
        }
      }()
      case 3: try {
        var v: CommandLine_OptionList?
        var hadOneofValue = false
        if let current = self.sectionType {
          hadOneofValue = true
          if case .optionList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.sectionType = .optionList(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sectionLabel.isEmpty {
      try visitor.visitSingularStringField(value: self.sectionLabel, fieldNumber: 1)
    }
    switch self.sectionType {
    case .chunkList?: try {
      guard case .chunkList(let v)? = self.sectionType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .optionList?: try {
      guard case .optionList(let v)? = self.sectionType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_CommandLineSection, rhs: CommandLine_CommandLineSection) -> Bool {
    if lhs.sectionLabel != rhs.sectionLabel {return false}
    if lhs.sectionType != rhs.sectionType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommandLine_ChunkList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChunkList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chunk"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.chunk) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chunk.isEmpty {
      try visitor.visitRepeatedStringField(value: self.chunk, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_ChunkList, rhs: CommandLine_ChunkList) -> Bool {
    if lhs.chunk != rhs.chunk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommandLine_OptionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OptionList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "option"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.option) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.option.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.option, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_OptionList, rhs: CommandLine_OptionList) -> Bool {
    if lhs.option != rhs.option {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommandLine_Option: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Option"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "combined_form"),
    2: .standard(proto: "option_name"),
    3: .standard(proto: "option_value"),
    4: .standard(proto: "effect_tags"),
    5: .standard(proto: "metadata_tags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.combinedForm) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.optionName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.optionValue) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.effectTags) }()
      case 5: try { try decoder.decodeRepeatedEnumField(value: &self.metadataTags) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.combinedForm.isEmpty {
      try visitor.visitSingularStringField(value: self.combinedForm, fieldNumber: 1)
    }
    if !self.optionName.isEmpty {
      try visitor.visitSingularStringField(value: self.optionName, fieldNumber: 2)
    }
    if !self.optionValue.isEmpty {
      try visitor.visitSingularStringField(value: self.optionValue, fieldNumber: 3)
    }
    if !self.effectTags.isEmpty {
      try visitor.visitPackedEnumField(value: self.effectTags, fieldNumber: 4)
    }
    if !self.metadataTags.isEmpty {
      try visitor.visitPackedEnumField(value: self.metadataTags, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_Option, rhs: CommandLine_Option) -> Bool {
    if lhs.combinedForm != rhs.combinedForm {return false}
    if lhs.optionName != rhs.optionName {return false}
    if lhs.optionValue != rhs.optionValue {return false}
    if lhs.effectTags != rhs.effectTags {return false}
    if lhs.metadataTags != rhs.metadataTags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
