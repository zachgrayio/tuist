// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/action_cache.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Information about the action cache behavior during a single build.
public struct Blaze_ActionCacheStatistics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Size of the action cache in bytes.
  ///
  /// This is computed by the code that persists the action cache to disk and
  /// represents the size of the written files, which has no direct relation to
  /// the number of entries in the cache.
  public var sizeInBytes: UInt64 = 0

  /// Time it took to save the action cache to disk.
  public var saveTimeInMs: UInt64 = 0

  /// Cache counters.
  public var hits: Int32 = 0

  public var misses: Int32 = 0

  /// Breakdown of the cache misses based on the reasons behind them.
  public var missDetails: [Blaze_ActionCacheStatistics.MissDetail] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Reasons for not finding an action in the cache.
  public enum MissReason: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case differentActionKey // = 0
    case differentDeps // = 1
    case differentEnvironment // = 2
    case differentFiles // = 3
    case corruptedCacheEntry // = 4
    case notCached // = 5
    case unconditionalExecution // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .differentActionKey
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .differentActionKey
      case 1: self = .differentDeps
      case 2: self = .differentEnvironment
      case 3: self = .differentFiles
      case 4: self = .corruptedCacheEntry
      case 5: self = .notCached
      case 6: self = .unconditionalExecution
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .differentActionKey: return 0
      case .differentDeps: return 1
      case .differentEnvironment: return 2
      case .differentFiles: return 3
      case .corruptedCacheEntry: return 4
      case .notCached: return 5
      case .unconditionalExecution: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Detailed information for a particular miss reason.
  public struct MissDetail {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var reason: Blaze_ActionCacheStatistics.MissReason = .differentActionKey

    public var count: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Blaze_ActionCacheStatistics.MissReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Blaze_ActionCacheStatistics.MissReason] = [
    .differentActionKey,
    .differentDeps,
    .differentEnvironment,
    .differentFiles,
    .corruptedCacheEntry,
    .notCached,
    .unconditionalExecution,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Blaze_ActionCacheStatistics: @unchecked Sendable {}
extension Blaze_ActionCacheStatistics.MissReason: @unchecked Sendable {}
extension Blaze_ActionCacheStatistics.MissDetail: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "blaze"

extension Blaze_ActionCacheStatistics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActionCacheStatistics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "size_in_bytes"),
    2: .standard(proto: "save_time_in_ms"),
    3: .same(proto: "hits"),
    4: .same(proto: "misses"),
    5: .standard(proto: "miss_details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.sizeInBytes) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.saveTimeInMs) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.hits) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.misses) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.missDetails) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sizeInBytes != 0 {
      try visitor.visitSingularUInt64Field(value: self.sizeInBytes, fieldNumber: 1)
    }
    if self.saveTimeInMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.saveTimeInMs, fieldNumber: 2)
    }
    if self.hits != 0 {
      try visitor.visitSingularInt32Field(value: self.hits, fieldNumber: 3)
    }
    if self.misses != 0 {
      try visitor.visitSingularInt32Field(value: self.misses, fieldNumber: 4)
    }
    if !self.missDetails.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.missDetails, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_ActionCacheStatistics, rhs: Blaze_ActionCacheStatistics) -> Bool {
    if lhs.sizeInBytes != rhs.sizeInBytes {return false}
    if lhs.saveTimeInMs != rhs.saveTimeInMs {return false}
    if lhs.hits != rhs.hits {return false}
    if lhs.misses != rhs.misses {return false}
    if lhs.missDetails != rhs.missDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Blaze_ActionCacheStatistics.MissReason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DIFFERENT_ACTION_KEY"),
    1: .same(proto: "DIFFERENT_DEPS"),
    2: .same(proto: "DIFFERENT_ENVIRONMENT"),
    3: .same(proto: "DIFFERENT_FILES"),
    4: .same(proto: "CORRUPTED_CACHE_ENTRY"),
    5: .same(proto: "NOT_CACHED"),
    6: .same(proto: "UNCONDITIONAL_EXECUTION"),
  ]
}

extension Blaze_ActionCacheStatistics.MissDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Blaze_ActionCacheStatistics.protoMessageName + ".MissDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
    2: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.reason != .differentActionKey {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_ActionCacheStatistics.MissDetail, rhs: Blaze_ActionCacheStatistics.MissDetail) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
