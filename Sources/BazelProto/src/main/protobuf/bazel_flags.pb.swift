// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/bazel_flags.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Copyright 2017 The Bazel Authors. All rights reserved.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///    http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// This file contains the protocol buffer representation of a list of supported
/// flags for Bazel commands.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct BazelFlags_FlagInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the flag, without leading dashes.
  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  /// True if --noname exists, too.
  public var hasNegativeFlag_p: Bool {
    get {return _hasNegativeFlag_p ?? false}
    set {_hasNegativeFlag_p = newValue}
  }
  /// Returns true if `hasNegativeFlag_p` has been explicitly set.
  public var hasHasNegativeFlag_p: Bool {return self._hasNegativeFlag_p != nil}
  /// Clears the value of `hasNegativeFlag_p`. Subsequent reads from it will return its default value.
  public mutating func clearHasNegativeFlag_p() {self._hasNegativeFlag_p = nil}

  /// Help text of the flag.
  public var documentation: String {
    get {return _documentation ?? String()}
    set {_documentation = newValue}
  }
  /// Returns true if `documentation` has been explicitly set.
  public var hasDocumentation: Bool {return self._documentation != nil}
  /// Clears the value of `documentation`. Subsequent reads from it will return its default value.
  public mutating func clearDocumentation() {self._documentation = nil}

  /// List of supported Bazel commands, e.g. ['build', 'test']
  public var commands: [String] = []

  /// Flag name abbreviation, without leading dash.
  public var abbreviation: String {
    get {return _abbreviation ?? String()}
    set {_abbreviation = newValue}
  }
  /// Returns true if `abbreviation` has been explicitly set.
  public var hasAbbreviation: Bool {return self._abbreviation != nil}
  /// Clears the value of `abbreviation`. Subsequent reads from it will return its default value.
  public mutating func clearAbbreviation() {self._abbreviation = nil}

  /// True if a flag is allowed to occur multiple times in a single arg list.
  public var allowsMultiple: Bool {
    get {return _allowsMultiple ?? false}
    set {_allowsMultiple = newValue}
  }
  /// Returns true if `allowsMultiple` has been explicitly set.
  public var hasAllowsMultiple: Bool {return self._allowsMultiple != nil}
  /// Clears the value of `allowsMultiple`. Subsequent reads from it will return its default value.
  public mutating func clearAllowsMultiple() {self._allowsMultiple = nil}

  /// The effect tags associated with the flag
  public var effectTags: [String] = []

  /// The metadata tags associated with the flag
  public var metadataTags: [String] = []

  /// The documentation category assigned to this flag
  public var documentationCategory: String {
    get {return _documentationCategory ?? String()}
    set {_documentationCategory = newValue}
  }
  /// Returns true if `documentationCategory` has been explicitly set.
  public var hasDocumentationCategory: Bool {return self._documentationCategory != nil}
  /// Clears the value of `documentationCategory`. Subsequent reads from it will return its default value.
  public mutating func clearDocumentationCategory() {self._documentationCategory = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _name: String? = nil
  fileprivate var _hasNegativeFlag_p: Bool? = nil
  fileprivate var _documentation: String? = nil
  fileprivate var _abbreviation: String? = nil
  fileprivate var _allowsMultiple: Bool? = nil
  fileprivate var _documentationCategory: String? = nil
}

public struct BazelFlags_FlagCollection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flagInfos: [BazelFlags_FlagInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension BazelFlags_FlagInfo: @unchecked Sendable {}
extension BazelFlags_FlagCollection: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bazel_flags"

extension BazelFlags_FlagInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FlagInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "has_negative_flag"),
    3: .same(proto: "documentation"),
    4: .same(proto: "commands"),
    5: .same(proto: "abbreviation"),
    6: .standard(proto: "allows_multiple"),
    7: .standard(proto: "effect_tags"),
    8: .standard(proto: "metadata_tags"),
    9: .standard(proto: "documentation_category"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._hasNegativeFlag_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._documentation) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.commands) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._abbreviation) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._allowsMultiple) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.effectTags) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.metadataTags) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._documentationCategory) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._hasNegativeFlag_p {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._documentation {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    if !self.commands.isEmpty {
      try visitor.visitRepeatedStringField(value: self.commands, fieldNumber: 4)
    }
    try { if let v = self._abbreviation {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._allowsMultiple {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    if !self.effectTags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.effectTags, fieldNumber: 7)
    }
    if !self.metadataTags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.metadataTags, fieldNumber: 8)
    }
    try { if let v = self._documentationCategory {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: BazelFlags_FlagInfo, rhs: BazelFlags_FlagInfo) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._hasNegativeFlag_p != rhs._hasNegativeFlag_p {return false}
    if lhs._documentation != rhs._documentation {return false}
    if lhs.commands != rhs.commands {return false}
    if lhs._abbreviation != rhs._abbreviation {return false}
    if lhs._allowsMultiple != rhs._allowsMultiple {return false}
    if lhs.effectTags != rhs.effectTags {return false}
    if lhs.metadataTags != rhs.metadataTags {return false}
    if lhs._documentationCategory != rhs._documentationCategory {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BazelFlags_FlagCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FlagCollection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "flag_infos"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.flagInfos) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.flagInfos) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.flagInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.flagInfos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: BazelFlags_FlagCollection, rhs: BazelFlags_FlagCollection) -> Bool {
    if lhs.flagInfos != rhs.flagInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
