// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/desugar_deps.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Top-level message that describes a desugared Jar file.
public struct Bazel_Tools_Desugar_DesugarDepsInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var assumePresent: [Bazel_Tools_Desugar_Dependency] = []

  public var missingInterface: [Bazel_Tools_Desugar_Dependency] = []

  public var interfaceWithSupertypes: [Bazel_Tools_Desugar_InterfaceDetails] = []

  /// Next ID: 5
  public var interfaceWithCompanion: [Bazel_Tools_Desugar_InterfaceWithCompanion] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Dependency between two types, may be transitive or direct.
public struct Bazel_Tools_Desugar_Dependency {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var origin: Bazel_Tools_Desugar_Type {
    get {return _origin ?? Bazel_Tools_Desugar_Type()}
    set {_origin = newValue}
  }
  /// Returns true if `origin` has been explicitly set.
  public var hasOrigin: Bool {return self._origin != nil}
  /// Clears the value of `origin`. Subsequent reads from it will return its default value.
  public mutating func clearOrigin() {self._origin = nil}

  /// Next ID: 3
  public var target: Bazel_Tools_Desugar_Type {
    get {return _target ?? Bazel_Tools_Desugar_Type()}
    set {_target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return self._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {self._target = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _origin: Bazel_Tools_Desugar_Type? = nil
  fileprivate var _target: Bazel_Tools_Desugar_Type? = nil
}

/// Summary of relevant information about an interface, to avoid parsing it.
public struct Bazel_Tools_Desugar_InterfaceDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var origin: Bazel_Tools_Desugar_Type {
    get {return _origin ?? Bazel_Tools_Desugar_Type()}
    set {_origin = newValue}
  }
  /// Returns true if `origin` has been explicitly set.
  public var hasOrigin: Bool {return self._origin != nil}
  /// Clears the value of `origin`. Subsequent reads from it will return its default value.
  public mutating func clearOrigin() {self._origin = nil}

  /// Next ID: 3
  public var extendedInterface: [Bazel_Tools_Desugar_Type] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _origin: Bazel_Tools_Desugar_Type? = nil
}

/// Details about an interface with a companion class.  This helps distinguishing
/// interfaces with default methods, which are a subset, and can also be used to
/// check for the presence of expected companion classes.
public struct Bazel_Tools_Desugar_InterfaceWithCompanion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var origin: Bazel_Tools_Desugar_Type {
    get {return _origin ?? Bazel_Tools_Desugar_Type()}
    set {_origin = newValue}
  }
  /// Returns true if `origin` has been explicitly set.
  public var hasOrigin: Bool {return self._origin != nil}
  /// Clears the value of `origin`. Subsequent reads from it will return its default value.
  public mutating func clearOrigin() {self._origin = nil}

  /// Next ID: 3
  public var numDefaultMethods: Int32 {
    get {return _numDefaultMethods ?? 0}
    set {_numDefaultMethods = newValue}
  }
  /// Returns true if `numDefaultMethods` has been explicitly set.
  public var hasNumDefaultMethods: Bool {return self._numDefaultMethods != nil}
  /// Clears the value of `numDefaultMethods`. Subsequent reads from it will return its default value.
  public mutating func clearNumDefaultMethods() {self._numDefaultMethods = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _origin: Bazel_Tools_Desugar_Type? = nil
  fileprivate var _numDefaultMethods: Int32? = nil
}

/// Wrapper around a JVMS 4.2.1 binary class or interface name.
public struct Bazel_Tools_Desugar_Type {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// JVMS 4.2.1 binary class name, e.g., java/lang/String, similar to how a
  /// class or interface name would appear in bytecode.
  public var binaryName: String {
    get {return _binaryName ?? String()}
    set {_binaryName = newValue}
  }
  /// Returns true if `binaryName` has been explicitly set.
  public var hasBinaryName: Bool {return self._binaryName != nil}
  /// Clears the value of `binaryName`. Subsequent reads from it will return its default value.
  public mutating func clearBinaryName() {self._binaryName = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _binaryName: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bazel_Tools_Desugar_DesugarDepsInfo: @unchecked Sendable {}
extension Bazel_Tools_Desugar_Dependency: @unchecked Sendable {}
extension Bazel_Tools_Desugar_InterfaceDetails: @unchecked Sendable {}
extension Bazel_Tools_Desugar_InterfaceWithCompanion: @unchecked Sendable {}
extension Bazel_Tools_Desugar_Type: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bazel.tools.desugar"

extension Bazel_Tools_Desugar_DesugarDepsInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DesugarDepsInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "assume_present"),
    2: .standard(proto: "missing_interface"),
    3: .standard(proto: "interface_with_supertypes"),
    4: .standard(proto: "interface_with_companion"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.assumePresent) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.missingInterface) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.interfaceWithSupertypes) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.interfaceWithCompanion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assumePresent.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assumePresent, fieldNumber: 1)
    }
    if !self.missingInterface.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.missingInterface, fieldNumber: 2)
    }
    if !self.interfaceWithSupertypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.interfaceWithSupertypes, fieldNumber: 3)
    }
    if !self.interfaceWithCompanion.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.interfaceWithCompanion, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bazel_Tools_Desugar_DesugarDepsInfo, rhs: Bazel_Tools_Desugar_DesugarDepsInfo) -> Bool {
    if lhs.assumePresent != rhs.assumePresent {return false}
    if lhs.missingInterface != rhs.missingInterface {return false}
    if lhs.interfaceWithSupertypes != rhs.interfaceWithSupertypes {return false}
    if lhs.interfaceWithCompanion != rhs.interfaceWithCompanion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bazel_Tools_Desugar_Dependency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dependency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origin"),
    2: .same(proto: "target"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._origin) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._target) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._origin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._target {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bazel_Tools_Desugar_Dependency, rhs: Bazel_Tools_Desugar_Dependency) -> Bool {
    if lhs._origin != rhs._origin {return false}
    if lhs._target != rhs._target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bazel_Tools_Desugar_InterfaceDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InterfaceDetails"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origin"),
    2: .standard(proto: "extended_interface"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._origin) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.extendedInterface) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._origin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.extendedInterface.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.extendedInterface, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bazel_Tools_Desugar_InterfaceDetails, rhs: Bazel_Tools_Desugar_InterfaceDetails) -> Bool {
    if lhs._origin != rhs._origin {return false}
    if lhs.extendedInterface != rhs.extendedInterface {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bazel_Tools_Desugar_InterfaceWithCompanion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InterfaceWithCompanion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origin"),
    2: .standard(proto: "num_default_methods"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._origin) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._numDefaultMethods) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._origin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._numDefaultMethods {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bazel_Tools_Desugar_InterfaceWithCompanion, rhs: Bazel_Tools_Desugar_InterfaceWithCompanion) -> Bool {
    if lhs._origin != rhs._origin {return false}
    if lhs._numDefaultMethods != rhs._numDefaultMethods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bazel_Tools_Desugar_Type: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Type"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "binary_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._binaryName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._binaryName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bazel_Tools_Desugar_Type, rhs: Bazel_Tools_Desugar_Type) -> Bool {
    if lhs._binaryName != rhs._binaryName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
