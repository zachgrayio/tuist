// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/android_deploy_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2016 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Blaze_Artifact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This path is relative to "bazel info execution_root"
  public var execRootPath: String = String()

  /// Points to a globally valid URI whenever possible.
  /// See BuildEventStreamOptions.java
  public var canonicalUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Information about how to deploy and launch the result of an android build
public struct Blaze_AndroidDeployInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The merged manifest in the resource APK
  public var mergedManifest: Blaze_Artifact {
    get {return _mergedManifest ?? Blaze_Artifact()}
    set {_mergedManifest = newValue}
  }
  /// Returns true if `mergedManifest` has been explicitly set.
  public var hasMergedManifest: Bool {return self._mergedManifest != nil}
  /// Clears the value of `mergedManifest`. Subsequent reads from it will return its default value.
  public mutating func clearMergedManifest() {self._mergedManifest = nil}

  /// Merged manifests of dependencies
  public var additionalMergedManifests: [Blaze_Artifact] = []

  /// If the build supports an external deploy, this will have the APKs.
  /// mobile-install does its own deployment, so this list will be empty
  public var apksToDeploy: [Blaze_Artifact] = []

  /// Unused
  public var dataToDeploy: [Blaze_Artifact] = []

  /// Used by mobile-install
  public var manifestPackageName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _mergedManifest: Blaze_Artifact? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Blaze_Artifact: @unchecked Sendable {}
extension Blaze_AndroidDeployInfo: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "blaze"

extension Blaze_Artifact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Artifact"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "exec_root_path"),
    2: .standard(proto: "canonical_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.execRootPath) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.canonicalUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.execRootPath.isEmpty {
      try visitor.visitSingularStringField(value: self.execRootPath, fieldNumber: 1)
    }
    if !self.canonicalUri.isEmpty {
      try visitor.visitSingularStringField(value: self.canonicalUri, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_Artifact, rhs: Blaze_Artifact) -> Bool {
    if lhs.execRootPath != rhs.execRootPath {return false}
    if lhs.canonicalUri != rhs.canonicalUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Blaze_AndroidDeployInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AndroidDeployInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "merged_manifest"),
    2: .standard(proto: "additional_merged_manifests"),
    3: .standard(proto: "apks_to_deploy"),
    4: .standard(proto: "data_to_deploy"),
    5: .standard(proto: "manifest_package_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._mergedManifest) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.additionalMergedManifests) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.apksToDeploy) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.dataToDeploy) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.manifestPackageName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mergedManifest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.additionalMergedManifests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalMergedManifests, fieldNumber: 2)
    }
    if !self.apksToDeploy.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.apksToDeploy, fieldNumber: 3)
    }
    if !self.dataToDeploy.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataToDeploy, fieldNumber: 4)
    }
    if !self.manifestPackageName.isEmpty {
      try visitor.visitSingularStringField(value: self.manifestPackageName, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_AndroidDeployInfo, rhs: Blaze_AndroidDeployInfo) -> Bool {
    if lhs._mergedManifest != rhs._mergedManifest {return false}
    if lhs.additionalMergedManifests != rhs.additionalMergedManifests {return false}
    if lhs.apksToDeploy != rhs.apksToDeploy {return false}
    if lhs.dataToDeploy != rhs.dataToDeploy {return false}
    if lhs.manifestPackageName != rhs.manifestPackageName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
