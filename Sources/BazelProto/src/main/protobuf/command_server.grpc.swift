//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: src/main/protobuf/command_server.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `CommandServer_CommandServerClient`, then call methods of this protocol to make API calls.
public protocol CommandServer_CommandServerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol? { get }

  func run(
    _ request: CommandServer_RunRequest,
    callOptions: CallOptions?,
    handler: @escaping (CommandServer_RunResponse) -> Void
  ) -> ServerStreamingCall<CommandServer_RunRequest, CommandServer_RunResponse>

  func cancel(
    _ request: CommandServer_CancelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CommandServer_CancelRequest, CommandServer_CancelResponse>

  func ping(
    _ request: CommandServer_PingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CommandServer_PingRequest, CommandServer_PingResponse>
}

extension CommandServer_CommandServerClientProtocol {
  public var serviceName: String {
    return "command_server.CommandServer"
  }

  /// Run a Bazel command. See documentation of argument/return messages for
  /// details.
  ///
  /// - Parameters:
  ///   - request: Request to send to Run.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func run(
    _ request: CommandServer_RunRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (CommandServer_RunResponse) -> Void
  ) -> ServerStreamingCall<CommandServer_RunRequest, CommandServer_RunResponse> {
    return self.makeServerStreamingCall(
      path: CommandServer_CommandServerClientMetadata.Methods.run.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunInterceptors() ?? [],
      handler: handler
    )
  }

  /// Cancel a currently running Bazel command. May return before the run command
  /// actually terminates.
  ///
  /// - Parameters:
  ///   - request: Request to send to Cancel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancel(
    _ request: CommandServer_CancelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CommandServer_CancelRequest, CommandServer_CancelResponse> {
    return self.makeUnaryCall(
      path: CommandServer_CommandServerClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }

  /// Does not do anything. Used for liveness check.
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: CommandServer_PingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CommandServer_PingRequest, CommandServer_PingResponse> {
    return self.makeUnaryCall(
      path: CommandServer_CommandServerClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension CommandServer_CommandServerClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "CommandServer_CommandServerNIOClient")
public final class CommandServer_CommandServerClient: CommandServer_CommandServerClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the command_server.CommandServer service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct CommandServer_CommandServerNIOClient: CommandServer_CommandServerClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol?

  /// Creates a client for the command_server.CommandServer service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol CommandServer_CommandServerAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol? { get }

  func makeRunCall(
    _ request: CommandServer_RunRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<CommandServer_RunRequest, CommandServer_RunResponse>

  func makeCancelCall(
    _ request: CommandServer_CancelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CommandServer_CancelRequest, CommandServer_CancelResponse>

  func makePingCall(
    _ request: CommandServer_PingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CommandServer_PingRequest, CommandServer_PingResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CommandServer_CommandServerAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return CommandServer_CommandServerClientMetadata.serviceDescriptor
  }

  public var interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeRunCall(
    _ request: CommandServer_RunRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<CommandServer_RunRequest, CommandServer_RunResponse> {
    return self.makeAsyncServerStreamingCall(
      path: CommandServer_CommandServerClientMetadata.Methods.run.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunInterceptors() ?? []
    )
  }

  public func makeCancelCall(
    _ request: CommandServer_CancelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CommandServer_CancelRequest, CommandServer_CancelResponse> {
    return self.makeAsyncUnaryCall(
      path: CommandServer_CommandServerClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }

  public func makePingCall(
    _ request: CommandServer_PingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CommandServer_PingRequest, CommandServer_PingResponse> {
    return self.makeAsyncUnaryCall(
      path: CommandServer_CommandServerClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CommandServer_CommandServerAsyncClientProtocol {
  public func run(
    _ request: CommandServer_RunRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<CommandServer_RunResponse> {
    return self.performAsyncServerStreamingCall(
      path: CommandServer_CommandServerClientMetadata.Methods.run.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunInterceptors() ?? []
    )
  }

  public func cancel(
    _ request: CommandServer_CancelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CommandServer_CancelResponse {
    return try await self.performAsyncUnaryCall(
      path: CommandServer_CommandServerClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }

  public func ping(
    _ request: CommandServer_PingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CommandServer_PingResponse {
    return try await self.performAsyncUnaryCall(
      path: CommandServer_CommandServerClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct CommandServer_CommandServerAsyncClient: CommandServer_CommandServerAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CommandServer_CommandServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol CommandServer_CommandServerClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'run'.
  func makeRunInterceptors() -> [ClientInterceptor<CommandServer_RunRequest, CommandServer_RunResponse>]

  /// - Returns: Interceptors to use when invoking 'cancel'.
  func makeCancelInterceptors() -> [ClientInterceptor<CommandServer_CancelRequest, CommandServer_CancelResponse>]

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<CommandServer_PingRequest, CommandServer_PingResponse>]
}

public enum CommandServer_CommandServerClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CommandServer",
    fullName: "command_server.CommandServer",
    methods: [
      CommandServer_CommandServerClientMetadata.Methods.run,
      CommandServer_CommandServerClientMetadata.Methods.cancel,
      CommandServer_CommandServerClientMetadata.Methods.ping,
    ]
  )

  public enum Methods {
    public static let run = GRPCMethodDescriptor(
      name: "Run",
      path: "/command_server.CommandServer/Run",
      type: GRPCCallType.serverStreaming
    )

    public static let cancel = GRPCMethodDescriptor(
      name: "Cancel",
      path: "/command_server.CommandServer/Cancel",
      type: GRPCCallType.unary
    )

    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/command_server.CommandServer/Ping",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol CommandServer_CommandServerProvider: CallHandlerProvider {
  var interceptors: CommandServer_CommandServerServerInterceptorFactoryProtocol? { get }

  /// Run a Bazel command. See documentation of argument/return messages for
  /// details.
  func run(request: CommandServer_RunRequest, context: StreamingResponseCallContext<CommandServer_RunResponse>) -> EventLoopFuture<GRPCStatus>

  /// Cancel a currently running Bazel command. May return before the run command
  /// actually terminates.
  func cancel(request: CommandServer_CancelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CommandServer_CancelResponse>

  /// Does not do anything. Used for liveness check.
  func ping(request: CommandServer_PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CommandServer_PingResponse>
}

extension CommandServer_CommandServerProvider {
  public var serviceName: Substring {
    return CommandServer_CommandServerServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Run":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CommandServer_RunRequest>(),
        responseSerializer: ProtobufSerializer<CommandServer_RunResponse>(),
        interceptors: self.interceptors?.makeRunInterceptors() ?? [],
        userFunction: self.run(request:context:)
      )

    case "Cancel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CommandServer_CancelRequest>(),
        responseSerializer: ProtobufSerializer<CommandServer_CancelResponse>(),
        interceptors: self.interceptors?.makeCancelInterceptors() ?? [],
        userFunction: self.cancel(request:context:)
      )

    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CommandServer_PingRequest>(),
        responseSerializer: ProtobufSerializer<CommandServer_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol CommandServer_CommandServerAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CommandServer_CommandServerServerInterceptorFactoryProtocol? { get }

  /// Run a Bazel command. See documentation of argument/return messages for
  /// details.
  @Sendable func run(
    request: CommandServer_RunRequest,
    responseStream: GRPCAsyncResponseStreamWriter<CommandServer_RunResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Cancel a currently running Bazel command. May return before the run command
  /// actually terminates.
  @Sendable func cancel(
    request: CommandServer_CancelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CommandServer_CancelResponse

  /// Does not do anything. Used for liveness check.
  @Sendable func ping(
    request: CommandServer_PingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CommandServer_PingResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CommandServer_CommandServerAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return CommandServer_CommandServerServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return CommandServer_CommandServerServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: CommandServer_CommandServerServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Run":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CommandServer_RunRequest>(),
        responseSerializer: ProtobufSerializer<CommandServer_RunResponse>(),
        interceptors: self.interceptors?.makeRunInterceptors() ?? [],
        wrapping: self.run(request:responseStream:context:)
      )

    case "Cancel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CommandServer_CancelRequest>(),
        responseSerializer: ProtobufSerializer<CommandServer_CancelResponse>(),
        interceptors: self.interceptors?.makeCancelInterceptors() ?? [],
        wrapping: self.cancel(request:context:)
      )

    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CommandServer_PingRequest>(),
        responseSerializer: ProtobufSerializer<CommandServer_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: self.ping(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol CommandServer_CommandServerServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'run'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRunInterceptors() -> [ServerInterceptor<CommandServer_RunRequest, CommandServer_RunResponse>]

  /// - Returns: Interceptors to use when handling 'cancel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelInterceptors() -> [ServerInterceptor<CommandServer_CancelRequest, CommandServer_CancelResponse>]

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<CommandServer_PingRequest, CommandServer_PingResponse>]
}

public enum CommandServer_CommandServerServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CommandServer",
    fullName: "command_server.CommandServer",
    methods: [
      CommandServer_CommandServerServerMetadata.Methods.run,
      CommandServer_CommandServerServerMetadata.Methods.cancel,
      CommandServer_CommandServerServerMetadata.Methods.ping,
    ]
  )

  public enum Methods {
    public static let run = GRPCMethodDescriptor(
      name: "Run",
      path: "/command_server.CommandServer/Run",
      type: GRPCCallType.serverStreaming
    )

    public static let cancel = GRPCMethodDescriptor(
      name: "Cancel",
      path: "/command_server.CommandServer/Cancel",
      type: GRPCCallType.unary
    )

    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/command_server.CommandServer/Ping",
      type: GRPCCallType.unary
    )
  }
}
