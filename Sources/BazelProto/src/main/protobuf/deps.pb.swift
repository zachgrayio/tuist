// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/deps.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2014 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Definitions for dependency reports.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A specific location within a source file.
public struct BlazeDeps_SourceLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var path: String {
    get {return _path ?? String()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  public var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  public mutating func clearPath() {self._path = nil}

  public var line: Int32 {
    get {return _line ?? 0}
    set {_line = newValue}
  }
  /// Returns true if `line` has been explicitly set.
  public var hasLine: Bool {return self._line != nil}
  /// Clears the value of `line`. Subsequent reads from it will return its default value.
  public mutating func clearLine() {self._line = nil}

  public var column: Int32 {
    get {return _column ?? 0}
    set {_column = newValue}
  }
  /// Returns true if `column` has been explicitly set.
  public var hasColumn: Bool {return self._column != nil}
  /// Clears the value of `column`. Subsequent reads from it will return its default value.
  public mutating func clearColumn() {self._column = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _path: String? = nil
  fileprivate var _line: Int32? = nil
  fileprivate var _column: Int32? = nil
}

public struct BlazeDeps_Dependency {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Path to the artifact representing this dependency.
  public var path: String {
    get {return _path ?? String()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  public var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  public mutating func clearPath() {self._path = nil}

  /// Dependency kind
  public var kind: BlazeDeps_Dependency.Kind {
    get {return _kind ?? .explicit}
    set {_kind = newValue}
  }
  /// Returns true if `kind` has been explicitly set.
  public var hasKind: Bool {return self._kind != nil}
  /// Clears the value of `kind`. Subsequent reads from it will return its default value.
  public mutating func clearKind() {self._kind = nil}

  /// Source file locations: compilers can pinpoint the uses of a dependency.
  public var location: [BlazeDeps_SourceLocation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Kind: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Dependency used explicitly in the source.
    case explicit // = 0

    /// Dependency that is implicitly loaded and used by the compiler.
    case implicit // = 1

    /// Unused dependency.
    case unused // = 2

    /// Implicit dependency considered by the compiler but not completed.
    case incomplete // = 3

    public init() {
      self = .explicit
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .explicit
      case 1: self = .implicit
      case 2: self = .unused
      case 3: self = .incomplete
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .explicit: return 0
      case .implicit: return 1
      case .unused: return 2
      case .incomplete: return 3
      }
    }

  }

  public init() {}

  fileprivate var _path: String? = nil
  fileprivate var _kind: BlazeDeps_Dependency.Kind? = nil
}

#if swift(>=4.2)

extension BlazeDeps_Dependency.Kind: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// Top-level message found in .deps artifacts
public struct BlazeDeps_Dependencies {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var dependency: [BlazeDeps_Dependency] = []

  /// Name of the rule being analyzed.
  public var ruleLabel: String {
    get {return _ruleLabel ?? String()}
    set {_ruleLabel = newValue}
  }
  /// Returns true if `ruleLabel` has been explicitly set.
  public var hasRuleLabel: Bool {return self._ruleLabel != nil}
  /// Clears the value of `ruleLabel`. Subsequent reads from it will return its default value.
  public mutating func clearRuleLabel() {self._ruleLabel = nil}

  /// Whether the action was successful; even when compilation fails, partial
  /// dependency information can be useful.
  public var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  public var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  public mutating func clearSuccess() {self._success = nil}

  /// Packages contained in the output jar, sorted alphabetically.
  public var containedPackage: [String] = []

  /// If the Java action was started with a reduced classpath and an error
  /// occurred suggesting that it should be rerun with the full classpath, this
  /// will be true.
  public var requiresReducedClasspathFallback: Bool {
    get {return _requiresReducedClasspathFallback ?? false}
    set {_requiresReducedClasspathFallback = newValue}
  }
  /// Returns true if `requiresReducedClasspathFallback` has been explicitly set.
  public var hasRequiresReducedClasspathFallback: Bool {return self._requiresReducedClasspathFallback != nil}
  /// Clears the value of `requiresReducedClasspathFallback`. Subsequent reads from it will return its default value.
  public mutating func clearRequiresReducedClasspathFallback() {self._requiresReducedClasspathFallback = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ruleLabel: String? = nil
  fileprivate var _success: Bool? = nil
  fileprivate var _requiresReducedClasspathFallback: Bool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension BlazeDeps_SourceLocation: @unchecked Sendable {}
extension BlazeDeps_Dependency: @unchecked Sendable {}
extension BlazeDeps_Dependency.Kind: @unchecked Sendable {}
extension BlazeDeps_Dependencies: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "blaze_deps"

extension BlazeDeps_SourceLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SourceLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "line"),
    3: .same(proto: "column"),
  ]

  public var isInitialized: Bool {
    if self._path == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._path) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._line) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._column) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._path {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._line {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._column {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: BlazeDeps_SourceLocation, rhs: BlazeDeps_SourceLocation) -> Bool {
    if lhs._path != rhs._path {return false}
    if lhs._line != rhs._line {return false}
    if lhs._column != rhs._column {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BlazeDeps_Dependency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dependency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "kind"),
    3: .same(proto: "location"),
  ]

  public var isInitialized: Bool {
    if self._path == nil {return false}
    if self._kind == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.location) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._path) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._kind) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.location) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._path {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._kind {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    if !self.location.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.location, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: BlazeDeps_Dependency, rhs: BlazeDeps_Dependency) -> Bool {
    if lhs._path != rhs._path {return false}
    if lhs._kind != rhs._kind {return false}
    if lhs.location != rhs.location {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BlazeDeps_Dependency.Kind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EXPLICIT"),
    1: .same(proto: "IMPLICIT"),
    2: .same(proto: "UNUSED"),
    3: .same(proto: "INCOMPLETE"),
  ]
}

extension BlazeDeps_Dependencies: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dependencies"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dependency"),
    2: .standard(proto: "rule_label"),
    3: .same(proto: "success"),
    4: .standard(proto: "contained_package"),
    5: .standard(proto: "requires_reduced_classpath_fallback"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.dependency) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dependency) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._ruleLabel) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.containedPackage) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._requiresReducedClasspathFallback) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dependency.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dependency, fieldNumber: 1)
    }
    try { if let v = self._ruleLabel {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    if !self.containedPackage.isEmpty {
      try visitor.visitRepeatedStringField(value: self.containedPackage, fieldNumber: 4)
    }
    try { if let v = self._requiresReducedClasspathFallback {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: BlazeDeps_Dependencies, rhs: BlazeDeps_Dependencies) -> Bool {
    if lhs.dependency != rhs.dependency {return false}
    if lhs._ruleLabel != rhs._ruleLabel {return false}
    if lhs._success != rhs._success {return false}
    if lhs.containedPackage != rhs.containedPackage {return false}
    if lhs._requiresReducedClasspathFallback != rhs._requiresReducedClasspathFallback {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
