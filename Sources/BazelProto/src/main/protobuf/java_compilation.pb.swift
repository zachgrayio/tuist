// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/java_compilation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2015 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Java library manifest, for use by IDEs.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Information about a single compilation unit (.java file)
public struct Blaze_Buildjar_CompilationUnit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The path to the compilation unit
  public var path: String {
    get {return _path ?? String()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  public var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  public mutating func clearPath() {self._path = nil}

  /// The package of the source file
  public var pkg: String {
    get {return _pkg ?? String()}
    set {_pkg = newValue}
  }
  /// Returns true if `pkg` has been explicitly set.
  public var hasPkg: Bool {return self._pkg != nil}
  /// Clears the value of `pkg`. Subsequent reads from it will return its default value.
  public mutating func clearPkg() {self._pkg = nil}

  /// Whether the source was generated by an annotation processor
  public var generatedByAnnotationProcessor: Bool {
    get {return _generatedByAnnotationProcessor ?? false}
    set {_generatedByAnnotationProcessor = newValue}
  }
  /// Returns true if `generatedByAnnotationProcessor` has been explicitly set.
  public var hasGeneratedByAnnotationProcessor: Bool {return self._generatedByAnnotationProcessor != nil}
  /// Clears the value of `generatedByAnnotationProcessor`. Subsequent reads from it will return its default value.
  public mutating func clearGeneratedByAnnotationProcessor() {self._generatedByAnnotationProcessor = nil}

  /// The list of top-level types in the compilation unit
  public var topLevel: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _path: String? = nil
  fileprivate var _pkg: String? = nil
  fileprivate var _generatedByAnnotationProcessor: Bool? = nil
}

/// Top-level message found in .manifest artifacts
public struct Blaze_Buildjar_Manifest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var compilationUnit: [Blaze_Buildjar_CompilationUnit] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Blaze_Buildjar_CompilationUnit: @unchecked Sendable {}
extension Blaze_Buildjar_Manifest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "blaze.buildjar"

extension Blaze_Buildjar_CompilationUnit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompilationUnit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "pkg"),
    3: .standard(proto: "generated_by_annotation_processor"),
    4: .standard(proto: "top_level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._path) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._pkg) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._generatedByAnnotationProcessor) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.topLevel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._path {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pkg {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._generatedByAnnotationProcessor {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    if !self.topLevel.isEmpty {
      try visitor.visitRepeatedStringField(value: self.topLevel, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_Buildjar_CompilationUnit, rhs: Blaze_Buildjar_CompilationUnit) -> Bool {
    if lhs._path != rhs._path {return false}
    if lhs._pkg != rhs._pkg {return false}
    if lhs._generatedByAnnotationProcessor != rhs._generatedByAnnotationProcessor {return false}
    if lhs.topLevel != rhs.topLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Blaze_Buildjar_Manifest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Manifest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "compilation_unit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.compilationUnit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.compilationUnit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.compilationUnit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_Buildjar_Manifest, rhs: Blaze_Buildjar_Manifest) -> Bool {
    if lhs.compilationUnit != rhs.compilationUnit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
