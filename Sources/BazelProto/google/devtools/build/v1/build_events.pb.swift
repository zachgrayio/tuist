// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/devtools/build/v1/build_events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The type of console output stream.
public enum Google_Devtools_Build_V1_ConsoleOutputStream: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified or unknown.
  case unknown // = 0

  /// Normal output stream.
  case stdout // = 1

  /// Error output stream.
  case stderr // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .stdout
    case 2: self = .stderr
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .stdout: return 1
    case .stderr: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Devtools_Build_V1_ConsoleOutputStream: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Devtools_Build_V1_ConsoleOutputStream] = [
    .unknown,
    .stdout,
    .stderr,
  ]
}

#endif  // swift(>=4.2)

/// An event representing some state change that occurred in the build. This
/// message does not include field for uniquely identifying an event.
public struct Google_Devtools_Build_V1_BuildEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The timestamp of this event.
  public var eventTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _eventTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_eventTime = newValue}
  }
  /// Returns true if `eventTime` has been explicitly set.
  public var hasEventTime: Bool {return self._eventTime != nil}
  /// Clears the value of `eventTime`. Subsequent reads from it will return its default value.
  public mutating func clearEventTime() {self._eventTime = nil}

  /// //////////////////////////////////////////////////////////////////////////
  /// Events that indicate a state change of a build request in the build
  /// queue.
  public var event: Google_Devtools_Build_V1_BuildEvent.OneOf_Event? = nil

  /// An invocation attempt has started.
  public var invocationAttemptStarted: Google_Devtools_Build_V1_BuildEvent.InvocationAttemptStarted {
    get {
      if case .invocationAttemptStarted(let v)? = event {return v}
      return Google_Devtools_Build_V1_BuildEvent.InvocationAttemptStarted()
    }
    set {event = .invocationAttemptStarted(newValue)}
  }

  /// An invocation attempt has finished.
  public var invocationAttemptFinished: Google_Devtools_Build_V1_BuildEvent.InvocationAttemptFinished {
    get {
      if case .invocationAttemptFinished(let v)? = event {return v}
      return Google_Devtools_Build_V1_BuildEvent.InvocationAttemptFinished()
    }
    set {event = .invocationAttemptFinished(newValue)}
  }

  /// The build is enqueued.
  public var buildEnqueued: Google_Devtools_Build_V1_BuildEvent.BuildEnqueued {
    get {
      if case .buildEnqueued(let v)? = event {return v}
      return Google_Devtools_Build_V1_BuildEvent.BuildEnqueued()
    }
    set {event = .buildEnqueued(newValue)}
  }

  /// The build has finished. Set when the build is terminated.
  public var buildFinished: Google_Devtools_Build_V1_BuildEvent.BuildFinished {
    get {
      if case .buildFinished(let v)? = event {return v}
      return Google_Devtools_Build_V1_BuildEvent.BuildFinished()
    }
    set {event = .buildFinished(newValue)}
  }

  /// An event containing printed text.
  public var consoleOutput: Google_Devtools_Build_V1_BuildEvent.ConsoleOutput {
    get {
      if case .consoleOutput(let v)? = event {return v}
      return Google_Devtools_Build_V1_BuildEvent.ConsoleOutput()
    }
    set {event = .consoleOutput(newValue)}
  }

  /// Indicates the end of a build event stream (with the same StreamId) from
  /// a build component executing the requested build task.
  /// *** This field does not indicate the WatchBuild RPC is finished. ***
  public var componentStreamFinished: Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished {
    get {
      if case .componentStreamFinished(let v)? = event {return v}
      return Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished()
    }
    set {event = .componentStreamFinished(newValue)}
  }

  /// Structured build event generated by Bazel about its execution progress.
  public var bazelEvent: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .bazelEvent(let v)? = event {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {event = .bazelEvent(newValue)}
  }

  /// An event that contains supplemental tool-specific information about
  /// build execution.
  public var buildExecutionEvent: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .buildExecutionEvent(let v)? = event {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {event = .buildExecutionEvent(newValue)}
  }

  /// An event that contains supplemental tool-specific information about
  /// source fetching.
  public var sourceFetchEvent: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .sourceFetchEvent(let v)? = event {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {event = .sourceFetchEvent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// //////////////////////////////////////////////////////////////////////////
  /// Events that indicate a state change of a build request in the build
  /// queue.
  public enum OneOf_Event: Equatable {
    /// An invocation attempt has started.
    case invocationAttemptStarted(Google_Devtools_Build_V1_BuildEvent.InvocationAttemptStarted)
    /// An invocation attempt has finished.
    case invocationAttemptFinished(Google_Devtools_Build_V1_BuildEvent.InvocationAttemptFinished)
    /// The build is enqueued.
    case buildEnqueued(Google_Devtools_Build_V1_BuildEvent.BuildEnqueued)
    /// The build has finished. Set when the build is terminated.
    case buildFinished(Google_Devtools_Build_V1_BuildEvent.BuildFinished)
    /// An event containing printed text.
    case consoleOutput(Google_Devtools_Build_V1_BuildEvent.ConsoleOutput)
    /// Indicates the end of a build event stream (with the same StreamId) from
    /// a build component executing the requested build task.
    /// *** This field does not indicate the WatchBuild RPC is finished. ***
    case componentStreamFinished(Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished)
    /// Structured build event generated by Bazel about its execution progress.
    case bazelEvent(SwiftProtobuf.Google_Protobuf_Any)
    /// An event that contains supplemental tool-specific information about
    /// build execution.
    case buildExecutionEvent(SwiftProtobuf.Google_Protobuf_Any)
    /// An event that contains supplemental tool-specific information about
    /// source fetching.
    case sourceFetchEvent(SwiftProtobuf.Google_Protobuf_Any)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Devtools_Build_V1_BuildEvent.OneOf_Event, rhs: Google_Devtools_Build_V1_BuildEvent.OneOf_Event) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.invocationAttemptStarted, .invocationAttemptStarted): return {
        guard case .invocationAttemptStarted(let l) = lhs, case .invocationAttemptStarted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.invocationAttemptFinished, .invocationAttemptFinished): return {
        guard case .invocationAttemptFinished(let l) = lhs, case .invocationAttemptFinished(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.buildEnqueued, .buildEnqueued): return {
        guard case .buildEnqueued(let l) = lhs, case .buildEnqueued(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.buildFinished, .buildFinished): return {
        guard case .buildFinished(let l) = lhs, case .buildFinished(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.consoleOutput, .consoleOutput): return {
        guard case .consoleOutput(let l) = lhs, case .consoleOutput(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.componentStreamFinished, .componentStreamFinished): return {
        guard case .componentStreamFinished(let l) = lhs, case .componentStreamFinished(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bazelEvent, .bazelEvent): return {
        guard case .bazelEvent(let l) = lhs, case .bazelEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.buildExecutionEvent, .buildExecutionEvent): return {
        guard case .buildExecutionEvent(let l) = lhs, case .buildExecutionEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sourceFetchEvent, .sourceFetchEvent): return {
        guard case .sourceFetchEvent(let l) = lhs, case .sourceFetchEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Notification that the build system has attempted to run the build tool.
  public struct InvocationAttemptStarted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The number of the invocation attempt, starting at 1 and increasing by 1
    /// for each new attempt. Can be used to determine if there is a later
    /// invocation attempt replacing the current one a client is processing.
    public var attemptNumber: Int64 = 0

    /// Arbitrary details about the invocation attempt.
    public var details: SwiftProtobuf.Google_Protobuf_Any {
      get {return _details ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_details = newValue}
    }
    /// Returns true if `details` has been explicitly set.
    public var hasDetails: Bool {return self._details != nil}
    /// Clears the value of `details`. Subsequent reads from it will return its default value.
    public mutating func clearDetails() {self._details = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _details: SwiftProtobuf.Google_Protobuf_Any? = nil
  }

  /// Notification that an invocation attempt has finished.
  public struct InvocationAttemptFinished {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Final status of the invocation.
    public var invocationStatus: Google_Devtools_Build_V1_BuildStatus {
      get {return _invocationStatus ?? Google_Devtools_Build_V1_BuildStatus()}
      set {_invocationStatus = newValue}
    }
    /// Returns true if `invocationStatus` has been explicitly set.
    public var hasInvocationStatus: Bool {return self._invocationStatus != nil}
    /// Clears the value of `invocationStatus`. Subsequent reads from it will return its default value.
    public mutating func clearInvocationStatus() {self._invocationStatus = nil}

    /// Arbitrary details about the invocation attempt.
    public var details: SwiftProtobuf.Google_Protobuf_Any {
      get {return _details ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_details = newValue}
    }
    /// Returns true if `details` has been explicitly set.
    public var hasDetails: Bool {return self._details != nil}
    /// Clears the value of `details`. Subsequent reads from it will return its default value.
    public mutating func clearDetails() {self._details = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _invocationStatus: Google_Devtools_Build_V1_BuildStatus? = nil
    fileprivate var _details: SwiftProtobuf.Google_Protobuf_Any? = nil
  }

  /// Notification that the build request is enqueued.
  public struct BuildEnqueued {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Additional details about the Build.
    public var details: SwiftProtobuf.Google_Protobuf_Any {
      get {return _details ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_details = newValue}
    }
    /// Returns true if `details` has been explicitly set.
    public var hasDetails: Bool {return self._details != nil}
    /// Clears the value of `details`. Subsequent reads from it will return its default value.
    public mutating func clearDetails() {self._details = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _details: SwiftProtobuf.Google_Protobuf_Any? = nil
  }

  /// Notification that the build request has finished, and no further
  /// invocations will occur.  Note that this applies to the entire Build.
  /// Individual invocations trigger InvocationFinished when they finish.
  public struct BuildFinished {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Final status of the build.
    public var status: Google_Devtools_Build_V1_BuildStatus {
      get {return _status ?? Google_Devtools_Build_V1_BuildStatus()}
      set {_status = newValue}
    }
    /// Returns true if `status` has been explicitly set.
    public var hasStatus: Bool {return self._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
    public mutating func clearStatus() {self._status = nil}

    /// Additional details about the Build.
    public var details: SwiftProtobuf.Google_Protobuf_Any {
      get {return _details ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_details = newValue}
    }
    /// Returns true if `details` has been explicitly set.
    public var hasDetails: Bool {return self._details != nil}
    /// Clears the value of `details`. Subsequent reads from it will return its default value.
    public mutating func clearDetails() {self._details = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _status: Google_Devtools_Build_V1_BuildStatus? = nil
    fileprivate var _details: SwiftProtobuf.Google_Protobuf_Any? = nil
  }

  /// Textual output written to standard output or standard error.
  public struct ConsoleOutput {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The output stream type.
    public var type: Google_Devtools_Build_V1_ConsoleOutputStream = .unknown

    /// The output stream content.
    public var output: Google_Devtools_Build_V1_BuildEvent.ConsoleOutput.OneOf_Output? = nil

    /// Regular UTF-8 output; normal text.
    public var textOutput: String {
      get {
        if case .textOutput(let v)? = output {return v}
        return String()
      }
      set {output = .textOutput(newValue)}
    }

    /// Used if the output is not UTF-8 text (for example, a binary proto).
    public var binaryOutput: Data {
      get {
        if case .binaryOutput(let v)? = output {return v}
        return Data()
      }
      set {output = .binaryOutput(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// The output stream content.
    public enum OneOf_Output: Equatable {
      /// Regular UTF-8 output; normal text.
      case textOutput(String)
      /// Used if the output is not UTF-8 text (for example, a binary proto).
      case binaryOutput(Data)

    #if !swift(>=4.1)
      public static func ==(lhs: Google_Devtools_Build_V1_BuildEvent.ConsoleOutput.OneOf_Output, rhs: Google_Devtools_Build_V1_BuildEvent.ConsoleOutput.OneOf_Output) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.textOutput, .textOutput): return {
          guard case .textOutput(let l) = lhs, case .textOutput(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.binaryOutput, .binaryOutput): return {
          guard case .binaryOutput(let l) = lhs, case .binaryOutput(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  /// Notification of the end of a build event stream published by a build
  /// component other than CONTROLLER (See StreamId.BuildComponents).
  public struct BuildComponentStreamFinished {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// How the event stream finished.
    public var type: Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished.FinishType = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// How did the event stream finish.
    public enum FinishType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Unknown or unspecified; callers should never set this value.
      case unspecified // = 0

      /// Set by the event publisher to indicate a build event stream is
      /// finished.
      case finished // = 1

      /// Set by the WatchBuild RPC server when the publisher of a build event
      /// stream stops publishing events without publishing a
      /// BuildComponentStreamFinished event whose type equals FINISHED.
      case expired // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .finished
        case 2: self = .expired
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .finished: return 1
        case .expired: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}

  fileprivate var _eventTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished.FinishType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished.FinishType] = [
    .unspecified,
    .finished,
    .expired,
  ]
}

#endif  // swift(>=4.2)

/// Unique identifier for a build event stream.
public struct Google_Devtools_Build_V1_StreamId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The id of a Build message.
  public var buildID: String = String()

  /// The unique invocation ID within this build.
  /// It should be the same as {invocation} (below) during the migration.
  public var invocationID: String = String()

  /// The component that emitted this event.
  public var component: Google_Devtools_Build_V1_StreamId.BuildComponent = .unknownComponent

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Which build component generates this event stream. Each build component
  /// may generate one event stream.
  public enum BuildComponent: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown or unspecified; callers should never set this value.
    case unknownComponent // = 0

    /// A component that coordinates builds.
    case controller // = 1

    /// A component that runs executables needed to complete a build.
    case worker // = 2

    /// A component that builds something.
    case tool // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknownComponent
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownComponent
      case 1: self = .controller
      case 2: self = .worker
      case 3: self = .tool
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownComponent: return 0
      case .controller: return 1
      case .worker: return 2
      case .tool: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Devtools_Build_V1_StreamId.BuildComponent: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Devtools_Build_V1_StreamId.BuildComponent] = [
    .unknownComponent,
    .controller,
    .worker,
    .tool,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Google_Devtools_Build_V1_ConsoleOutputStream: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent.OneOf_Event: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent.InvocationAttemptStarted: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent.InvocationAttemptFinished: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent.BuildEnqueued: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent.BuildFinished: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent.ConsoleOutput: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent.ConsoleOutput.OneOf_Output: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished: @unchecked Sendable {}
extension Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished.FinishType: @unchecked Sendable {}
extension Google_Devtools_Build_V1_StreamId: @unchecked Sendable {}
extension Google_Devtools_Build_V1_StreamId.BuildComponent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.devtools.build.v1"

extension Google_Devtools_Build_V1_ConsoleOutputStream: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "STDOUT"),
    2: .same(proto: "STDERR"),
  ]
}

extension Google_Devtools_Build_V1_BuildEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BuildEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_time"),
    51: .standard(proto: "invocation_attempt_started"),
    52: .standard(proto: "invocation_attempt_finished"),
    53: .standard(proto: "build_enqueued"),
    55: .standard(proto: "build_finished"),
    56: .standard(proto: "console_output"),
    59: .standard(proto: "component_stream_finished"),
    60: .standard(proto: "bazel_event"),
    61: .standard(proto: "build_execution_event"),
    62: .standard(proto: "source_fetch_event"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._eventTime) }()
      case 51: try {
        var v: Google_Devtools_Build_V1_BuildEvent.InvocationAttemptStarted?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .invocationAttemptStarted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .invocationAttemptStarted(v)
        }
      }()
      case 52: try {
        var v: Google_Devtools_Build_V1_BuildEvent.InvocationAttemptFinished?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .invocationAttemptFinished(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .invocationAttemptFinished(v)
        }
      }()
      case 53: try {
        var v: Google_Devtools_Build_V1_BuildEvent.BuildEnqueued?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .buildEnqueued(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .buildEnqueued(v)
        }
      }()
      case 55: try {
        var v: Google_Devtools_Build_V1_BuildEvent.BuildFinished?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .buildFinished(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .buildFinished(v)
        }
      }()
      case 56: try {
        var v: Google_Devtools_Build_V1_BuildEvent.ConsoleOutput?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .consoleOutput(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .consoleOutput(v)
        }
      }()
      case 59: try {
        var v: Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .componentStreamFinished(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .componentStreamFinished(v)
        }
      }()
      case 60: try {
        var v: SwiftProtobuf.Google_Protobuf_Any?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .bazelEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .bazelEvent(v)
        }
      }()
      case 61: try {
        var v: SwiftProtobuf.Google_Protobuf_Any?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .buildExecutionEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .buildExecutionEvent(v)
        }
      }()
      case 62: try {
        var v: SwiftProtobuf.Google_Protobuf_Any?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .sourceFetchEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .sourceFetchEvent(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._eventTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.event {
    case .invocationAttemptStarted?: try {
      guard case .invocationAttemptStarted(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
    }()
    case .invocationAttemptFinished?: try {
      guard case .invocationAttemptFinished(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
    }()
    case .buildEnqueued?: try {
      guard case .buildEnqueued(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
    }()
    case .buildFinished?: try {
      guard case .buildFinished(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 55)
    }()
    case .consoleOutput?: try {
      guard case .consoleOutput(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
    }()
    case .componentStreamFinished?: try {
      guard case .componentStreamFinished(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
    }()
    case .bazelEvent?: try {
      guard case .bazelEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
    }()
    case .buildExecutionEvent?: try {
      guard case .buildExecutionEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
    }()
    case .sourceFetchEvent?: try {
      guard case .sourceFetchEvent(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Build_V1_BuildEvent, rhs: Google_Devtools_Build_V1_BuildEvent) -> Bool {
    if lhs._eventTime != rhs._eventTime {return false}
    if lhs.event != rhs.event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Build_V1_BuildEvent.InvocationAttemptStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Devtools_Build_V1_BuildEvent.protoMessageName + ".InvocationAttemptStarted"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attempt_number"),
    2: .same(proto: "details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.attemptNumber) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.attemptNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.attemptNumber, fieldNumber: 1)
    }
    try { if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Build_V1_BuildEvent.InvocationAttemptStarted, rhs: Google_Devtools_Build_V1_BuildEvent.InvocationAttemptStarted) -> Bool {
    if lhs.attemptNumber != rhs.attemptNumber {return false}
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Build_V1_BuildEvent.InvocationAttemptFinished: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Devtools_Build_V1_BuildEvent.protoMessageName + ".InvocationAttemptFinished"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "invocation_status"),
    4: .same(proto: "details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularMessageField(value: &self._invocationStatus) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._invocationStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Build_V1_BuildEvent.InvocationAttemptFinished, rhs: Google_Devtools_Build_V1_BuildEvent.InvocationAttemptFinished) -> Bool {
    if lhs._invocationStatus != rhs._invocationStatus {return false}
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Build_V1_BuildEvent.BuildEnqueued: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Devtools_Build_V1_BuildEvent.protoMessageName + ".BuildEnqueued"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Build_V1_BuildEvent.BuildEnqueued, rhs: Google_Devtools_Build_V1_BuildEvent.BuildEnqueued) -> Bool {
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Build_V1_BuildEvent.BuildFinished: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Devtools_Build_V1_BuildEvent.protoMessageName + ".BuildFinished"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Build_V1_BuildEvent.BuildFinished, rhs: Google_Devtools_Build_V1_BuildEvent.BuildFinished) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Build_V1_BuildEvent.ConsoleOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Devtools_Build_V1_BuildEvent.protoMessageName + ".ConsoleOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "text_output"),
    3: .standard(proto: "binary_output"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.output != nil {try decoder.handleConflictingOneOf()}
          self.output = .textOutput(v)
        }
      }()
      case 3: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.output != nil {try decoder.handleConflictingOneOf()}
          self.output = .binaryOutput(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    switch self.output {
    case .textOutput?: try {
      guard case .textOutput(let v)? = self.output else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .binaryOutput?: try {
      guard case .binaryOutput(let v)? = self.output else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Build_V1_BuildEvent.ConsoleOutput, rhs: Google_Devtools_Build_V1_BuildEvent.ConsoleOutput) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.output != rhs.output {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Devtools_Build_V1_BuildEvent.protoMessageName + ".BuildComponentStreamFinished"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished, rhs: Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Build_V1_BuildEvent.BuildComponentStreamFinished.FinishType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FINISH_TYPE_UNSPECIFIED"),
    1: .same(proto: "FINISHED"),
    2: .same(proto: "EXPIRED"),
  ]
}

extension Google_Devtools_Build_V1_StreamId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_id"),
    6: .standard(proto: "invocation_id"),
    3: .same(proto: "component"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.buildID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.component) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.invocationID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buildID.isEmpty {
      try visitor.visitSingularStringField(value: self.buildID, fieldNumber: 1)
    }
    if self.component != .unknownComponent {
      try visitor.visitSingularEnumField(value: self.component, fieldNumber: 3)
    }
    if !self.invocationID.isEmpty {
      try visitor.visitSingularStringField(value: self.invocationID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Devtools_Build_V1_StreamId, rhs: Google_Devtools_Build_V1_StreamId) -> Bool {
    if lhs.buildID != rhs.buildID {return false}
    if lhs.invocationID != rhs.invocationID {return false}
    if lhs.component != rhs.component {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Devtools_Build_V1_StreamId.BuildComponent: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_COMPONENT"),
    1: .same(proto: "CONTROLLER"),
    2: .same(proto: "WORKER"),
    3: .same(proto: "TOOL"),
  ]
}
