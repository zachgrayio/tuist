//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/devtools/build/v1/publish_build_event.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// A service for publishing BuildEvents. BuildEvents are generated by Build
/// Systems to record actions taken during a Build. Events occur in streams,
/// are identified by a StreamId, and ordered by sequence number in a stream.
///
/// A Build may contain several streams of BuildEvents, depending on the systems
/// that are involved in the Build. Some BuildEvents are used to declare the
/// beginning and end of major portions of a Build; these are called
/// LifecycleEvents, and are used (for example) to indicate the beginning or end
/// of a Build, and the beginning or end of an Invocation attempt (there can be
/// more than 1 Invocation in a Build if, for example, a failure occurs somewhere
/// and it needs to be retried).
///
/// Other, build-tool events represent actions taken by the Build tool, such as
/// target objects produced via compilation, tests run, et cetera. There could be
/// more than one build tool stream for an invocation attempt of a build.
///
/// Usage: instantiate `Google_Devtools_Build_V1_PublishBuildEventClient`, then call methods of this protocol to make API calls.
public protocol Google_Devtools_Build_V1_PublishBuildEventClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol? { get }

  func publishLifecycleEvent(
    _ request: Google_Devtools_Build_V1_PublishLifecycleEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Build_V1_PublishLifecycleEventRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func publishBuildToolEventStream(
    callOptions: CallOptions?,
    handler: @escaping (Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest, Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse>
}

extension Google_Devtools_Build_V1_PublishBuildEventClientProtocol {
  public var serviceName: String {
    return "google.devtools.build.v1.PublishBuildEvent"
  }

  /// Publish a build event stating the new state of a build (typically from the
  /// build queue). The BuildEnqueued event must be publishd before all other
  /// events for the same build ID.
  ///
  /// The backend will persist the event and deliver it to registered frontend
  /// jobs immediately without batching.
  ///
  /// The commit status of the request is reported by the RPC's util_status()
  /// function. The error code is the canoncial error code defined in
  /// //util/task/codes.proto.
  ///
  /// - Parameters:
  ///   - request: Request to send to PublishLifecycleEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func publishLifecycleEvent(
    _ request: Google_Devtools_Build_V1_PublishLifecycleEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Build_V1_PublishLifecycleEventRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Devtools_Build_V1_PublishBuildEventClientMetadata.Methods.publishLifecycleEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishLifecycleEventInterceptors() ?? []
    )
  }

  /// Publish build tool events belonging to the same stream to a backend job
  /// using bidirectional streaming.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func publishBuildToolEventStream(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest, Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Google_Devtools_Build_V1_PublishBuildEventClientMetadata.Methods.publishBuildToolEventStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishBuildToolEventStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Google_Devtools_Build_V1_PublishBuildEventClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Google_Devtools_Build_V1_PublishBuildEventNIOClient")
public final class Google_Devtools_Build_V1_PublishBuildEventClient: Google_Devtools_Build_V1_PublishBuildEventClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.devtools.build.v1.PublishBuildEvent service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Google_Devtools_Build_V1_PublishBuildEventNIOClient: Google_Devtools_Build_V1_PublishBuildEventClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol?

  /// Creates a client for the google.devtools.build.v1.PublishBuildEvent service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// A service for publishing BuildEvents. BuildEvents are generated by Build
/// Systems to record actions taken during a Build. Events occur in streams,
/// are identified by a StreamId, and ordered by sequence number in a stream.
///
/// A Build may contain several streams of BuildEvents, depending on the systems
/// that are involved in the Build. Some BuildEvents are used to declare the
/// beginning and end of major portions of a Build; these are called
/// LifecycleEvents, and are used (for example) to indicate the beginning or end
/// of a Build, and the beginning or end of an Invocation attempt (there can be
/// more than 1 Invocation in a Build if, for example, a failure occurs somewhere
/// and it needs to be retried).
///
/// Other, build-tool events represent actions taken by the Build tool, such as
/// target objects produced via compilation, tests run, et cetera. There could be
/// more than one build tool stream for an invocation attempt of a build.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Devtools_Build_V1_PublishBuildEventAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol? { get }

  func makePublishLifecycleEventCall(
    _ request: Google_Devtools_Build_V1_PublishLifecycleEventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Devtools_Build_V1_PublishLifecycleEventRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makePublishBuildToolEventStreamCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest, Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Devtools_Build_V1_PublishBuildEventAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Devtools_Build_V1_PublishBuildEventClientMetadata.serviceDescriptor
  }

  public var interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePublishLifecycleEventCall(
    _ request: Google_Devtools_Build_V1_PublishLifecycleEventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Devtools_Build_V1_PublishLifecycleEventRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Devtools_Build_V1_PublishBuildEventClientMetadata.Methods.publishLifecycleEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishLifecycleEventInterceptors() ?? []
    )
  }

  public func makePublishBuildToolEventStreamCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest, Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Google_Devtools_Build_V1_PublishBuildEventClientMetadata.Methods.publishBuildToolEventStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishBuildToolEventStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Devtools_Build_V1_PublishBuildEventAsyncClientProtocol {
  public func publishLifecycleEvent(
    _ request: Google_Devtools_Build_V1_PublishLifecycleEventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Devtools_Build_V1_PublishBuildEventClientMetadata.Methods.publishLifecycleEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishLifecycleEventInterceptors() ?? []
    )
  }

  public func publishBuildToolEventStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse> where RequestStream: Sequence, RequestStream.Element == Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Google_Devtools_Build_V1_PublishBuildEventClientMetadata.Methods.publishBuildToolEventStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishBuildToolEventStreamInterceptors() ?? []
    )
  }

  public func publishBuildToolEventStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Google_Devtools_Build_V1_PublishBuildEventClientMetadata.Methods.publishBuildToolEventStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishBuildToolEventStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Google_Devtools_Build_V1_PublishBuildEventAsyncClient: Google_Devtools_Build_V1_PublishBuildEventAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Google_Devtools_Build_V1_PublishBuildEventClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'publishLifecycleEvent'.
  func makePublishLifecycleEventInterceptors() -> [ClientInterceptor<Google_Devtools_Build_V1_PublishLifecycleEventRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'publishBuildToolEventStream'.
  func makePublishBuildToolEventStreamInterceptors() -> [ClientInterceptor<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest, Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse>]
}

public enum Google_Devtools_Build_V1_PublishBuildEventClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PublishBuildEvent",
    fullName: "google.devtools.build.v1.PublishBuildEvent",
    methods: [
      Google_Devtools_Build_V1_PublishBuildEventClientMetadata.Methods.publishLifecycleEvent,
      Google_Devtools_Build_V1_PublishBuildEventClientMetadata.Methods.publishBuildToolEventStream,
    ]
  )

  public enum Methods {
    public static let publishLifecycleEvent = GRPCMethodDescriptor(
      name: "PublishLifecycleEvent",
      path: "/google.devtools.build.v1.PublishBuildEvent/PublishLifecycleEvent",
      type: GRPCCallType.unary
    )

    public static let publishBuildToolEventStream = GRPCMethodDescriptor(
      name: "PublishBuildToolEventStream",
      path: "/google.devtools.build.v1.PublishBuildEvent/PublishBuildToolEventStream",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// A service for publishing BuildEvents. BuildEvents are generated by Build
/// Systems to record actions taken during a Build. Events occur in streams,
/// are identified by a StreamId, and ordered by sequence number in a stream.
///
/// A Build may contain several streams of BuildEvents, depending on the systems
/// that are involved in the Build. Some BuildEvents are used to declare the
/// beginning and end of major portions of a Build; these are called
/// LifecycleEvents, and are used (for example) to indicate the beginning or end
/// of a Build, and the beginning or end of an Invocation attempt (there can be
/// more than 1 Invocation in a Build if, for example, a failure occurs somewhere
/// and it needs to be retried).
///
/// Other, build-tool events represent actions taken by the Build tool, such as
/// target objects produced via compilation, tests run, et cetera. There could be
/// more than one build tool stream for an invocation attempt of a build.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Devtools_Build_V1_PublishBuildEventProvider: CallHandlerProvider {
  var interceptors: Google_Devtools_Build_V1_PublishBuildEventServerInterceptorFactoryProtocol? { get }

  /// Publish a build event stating the new state of a build (typically from the
  /// build queue). The BuildEnqueued event must be publishd before all other
  /// events for the same build ID.
  ///
  /// The backend will persist the event and deliver it to registered frontend
  /// jobs immediately without batching.
  ///
  /// The commit status of the request is reported by the RPC's util_status()
  /// function. The error code is the canoncial error code defined in
  /// //util/task/codes.proto.
  func publishLifecycleEvent(request: Google_Devtools_Build_V1_PublishLifecycleEventRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Publish build tool events belonging to the same stream to a backend job
  /// using bidirectional streaming.
  func publishBuildToolEventStream(context: StreamingResponseCallContext<Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse>) -> EventLoopFuture<(StreamEvent<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest>) -> Void>
}

extension Google_Devtools_Build_V1_PublishBuildEventProvider {
  public var serviceName: Substring {
    return Google_Devtools_Build_V1_PublishBuildEventServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PublishLifecycleEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Devtools_Build_V1_PublishLifecycleEventRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makePublishLifecycleEventInterceptors() ?? [],
        userFunction: self.publishLifecycleEvent(request:context:)
      )

    case "PublishBuildToolEventStream":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest>(),
        responseSerializer: ProtobufSerializer<Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse>(),
        interceptors: self.interceptors?.makePublishBuildToolEventStreamInterceptors() ?? [],
        observerFactory: self.publishBuildToolEventStream(context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// A service for publishing BuildEvents. BuildEvents are generated by Build
/// Systems to record actions taken during a Build. Events occur in streams,
/// are identified by a StreamId, and ordered by sequence number in a stream.
///
/// A Build may contain several streams of BuildEvents, depending on the systems
/// that are involved in the Build. Some BuildEvents are used to declare the
/// beginning and end of major portions of a Build; these are called
/// LifecycleEvents, and are used (for example) to indicate the beginning or end
/// of a Build, and the beginning or end of an Invocation attempt (there can be
/// more than 1 Invocation in a Build if, for example, a failure occurs somewhere
/// and it needs to be retried).
///
/// Other, build-tool events represent actions taken by the Build tool, such as
/// target objects produced via compilation, tests run, et cetera. There could be
/// more than one build tool stream for an invocation attempt of a build.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Devtools_Build_V1_PublishBuildEventAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Devtools_Build_V1_PublishBuildEventServerInterceptorFactoryProtocol? { get }

  /// Publish a build event stating the new state of a build (typically from the
  /// build queue). The BuildEnqueued event must be publishd before all other
  /// events for the same build ID.
  ///
  /// The backend will persist the event and deliver it to registered frontend
  /// jobs immediately without batching.
  ///
  /// The commit status of the request is reported by the RPC's util_status()
  /// function. The error code is the canoncial error code defined in
  /// //util/task/codes.proto.
  @Sendable func publishLifecycleEvent(
    request: Google_Devtools_Build_V1_PublishLifecycleEventRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Publish build tool events belonging to the same stream to a backend job
  /// using bidirectional streaming.
  @Sendable func publishBuildToolEventStream(
    requestStream: GRPCAsyncRequestStream<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Devtools_Build_V1_PublishBuildEventAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Devtools_Build_V1_PublishBuildEventServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Google_Devtools_Build_V1_PublishBuildEventServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Google_Devtools_Build_V1_PublishBuildEventServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PublishLifecycleEvent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Devtools_Build_V1_PublishLifecycleEventRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makePublishLifecycleEventInterceptors() ?? [],
        wrapping: self.publishLifecycleEvent(request:context:)
      )

    case "PublishBuildToolEventStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest>(),
        responseSerializer: ProtobufSerializer<Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse>(),
        interceptors: self.interceptors?.makePublishBuildToolEventStreamInterceptors() ?? [],
        wrapping: self.publishBuildToolEventStream(requestStream:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Google_Devtools_Build_V1_PublishBuildEventServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'publishLifecycleEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePublishLifecycleEventInterceptors() -> [ServerInterceptor<Google_Devtools_Build_V1_PublishLifecycleEventRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'publishBuildToolEventStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePublishBuildToolEventStreamInterceptors() -> [ServerInterceptor<Google_Devtools_Build_V1_PublishBuildToolEventStreamRequest, Google_Devtools_Build_V1_PublishBuildToolEventStreamResponse>]
}

public enum Google_Devtools_Build_V1_PublishBuildEventServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PublishBuildEvent",
    fullName: "google.devtools.build.v1.PublishBuildEvent",
    methods: [
      Google_Devtools_Build_V1_PublishBuildEventServerMetadata.Methods.publishLifecycleEvent,
      Google_Devtools_Build_V1_PublishBuildEventServerMetadata.Methods.publishBuildToolEventStream,
    ]
  )

  public enum Methods {
    public static let publishLifecycleEvent = GRPCMethodDescriptor(
      name: "PublishLifecycleEvent",
      path: "/google.devtools.build.v1.PublishBuildEvent/PublishLifecycleEvent",
      type: GRPCCallType.unary
    )

    public static let publishBuildToolEventStream = GRPCMethodDescriptor(
      name: "PublishBuildToolEventStream",
      path: "/google.devtools.build.v1.PublishBuildEvent/PublishBuildToolEventStream",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
